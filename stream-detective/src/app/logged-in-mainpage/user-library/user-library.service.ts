import { Injectable } from '@angular/core';
import { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/compat/firestore';
import { Observable } from 'rxjs';
import { AuthService } from 'src/app/auth/auth.service';
import { UserLibraryData } from 'src/app/shared/streaming-data.model';
import { map } from 'rxjs/operators'

@Injectable({
  providedIn: 'root'
})
export class UserLibraryService {
  watchlistCollection: AngularFirestoreCollection; // need to specificy <type>
  watchlist: Observable<UserLibraryData[]>


  constructor(
    private authService: AuthService,
    public afs: AngularFirestore
  ) {
    // set Firestore route for logged in User's Library Database
    this.watchlistCollection = this.afs
      .collection('users')
      .doc(this.authService.userData.uid)
      .collection('watchlist')

    // retrieve all projcts form the database when component is loaded
    this.watchlist = this.watchlistCollection
      .snapshotChanges()
      .pipe(
        map(changes => changes.map(a => {
          const data = a.payload.doc.data() as UserLibraryData //show unique ID generated by firestore when data is created
          data.id = a.payload.doc.id;
          return data
      }))
    )
  }


  // Add movie/show to User->Watchlist in Firestore
  addToWatchlist(movie: UserLibraryData) {
    // have to declare below to prevent "firestore custom Obj error"
    const watchlistData: UserLibraryData = {
      titleName: movie.titleName,
      streamName: movie.streamName
    }
    this.watchlistCollection
      .add(watchlistData)
      .then((dataAdded) => {
        watchlistData.id = dataAdded.id; //assign firebase created ID to watchlist obj ID
        console.log('added to firestore:', dataAdded)
      })
      .catch((error) => {
      console.log('Error adding document to firestore:', error)
    })
  }

  getWatchlist() {
    return this.watchlist;
  }


}
